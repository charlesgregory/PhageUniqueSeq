import com.sun.jna.*;

import java.io.File;
import java.util.Arrays;
import java.util.List;

/**
 * Copyright (C) 2016  Thomas Gregory

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 * JNA Wrapper for library <b>dpal</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 * JNA class and interface for Dpal code compiled libraries from the Primer3 source code
 *
 * Untergasser A, Cutcutache I, Koressaar T, Ye J, Faircloth BC, Remm M, Rozen SG (2012)
 * Primer3 - new capabilities and interfaces. Nucleic Acids Research 40(15):e115 Koressaar T,
 * Remm M (2007) Enhancements and modifications of primer design program
 * Primer3 Bioinformatics 23(10):1289-91
 *
 */
public class DpalLoad{
    public static Dpal INSTANCE_WIN64;
    public interface Dpal extends Library {
        public static final String base = new File("").getAbsolutePath();
        public static final String DPAL_WIN64 = "dpal64";
        public static final String DPAL_WIN32 = "dpal";
        //public static final Dpal INSTANCE_WIN32 = (Dpal)Native.loadLibrary(Dpal.DPAL_WIN32, Dpal.class);
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int CHAR_MIN = (int)0;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int _I32_MAX = (int)2147483647;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int USHRT_MAX = (int)0xffff;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int MB_LEN_MAX = (int)5;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int _I16_MAX = (int)32767;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long UINT_MAX = (long)0xffffffffL;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int _UI16_MAX = (int)0xffff;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int CHAR_MAX = (int)0xff;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long _UI32_MAX = (long)0xffffffffL;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int LONG_MAX = (int)2147483647;
        public static final int DPAL_EXIT_ON_ERROR = (int)0;
        public static final int DPAL_LOCAL = (int)0;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long ULONG_MAX = (long)0xffffffffL;
        /**
         * define<br>
         * Conversion Error : null<br>
         * SKIPPED:<br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i><br>
         * - 1
         */
        /**
         * define<br>
         * Conversion Error : null<br>
         * SKIPPED:<br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i><br>
         * - 1
         */
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int SHRT_MAX = (int)32767;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long LLONG_MAX = (long)9223372036854775807L;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int SHRT_MIN = (int)(-32768);
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int UCHAR_MAX = (int)0xff;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long SIZE_MAX = (long)0xffffffffL;
        /**
         * define<br>
         * Conversion Error : null<br>
         * SKIPPED:<br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i><br>
         * - 1
         */
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int _UI8_MAX = (int)0xff;
        public static final int DPAL_ERROR_SCORE = (int)(-2147483647 - 1);
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long _UI64_MAX = (long)0xffffffffffffffffL;
        public static final int DPAL_LOCAL_END = (int)3;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int CHAR_BIT = (int)8;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int INT_MIN = (int)(-2147483647 - 1);
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int SCHAR_MAX = (int)127;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int INT_MAX = (int)2147483647;
        /**
         * define<br>
         * Conversion Error : null<br>
         * SKIPPED:<br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i><br>
         * - 1
         */
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long ULLONG_MAX = (long)0xffffffffffffffffL;
        /**
         * define<br>
         * Conversion Error : null<br>
         * SKIPPED:<br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i><br>
         * - 1
         */
        public static final int DPAL_GLOBAL_END = (int)1;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int SCHAR_MIN = (int)(-128);
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final long _I64_MAX = (long)9223372036854775807L;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int _I8_MAX = (int)127;
        public static final int DPAL_GLOBAL = (int)2;
        public static final int DPAL_MAX_ALIGN = (int)1600;
        /** <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h</i> */
        public static final int LONG_MIN = (int)(-2147483647 - 1);
        /**
         * Initialize the argument to the default matrix for nucleotide matches.<br>
         * Original signature : <code>void dpal_set_default_nt_args(dpal_args*)</code><br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h:156</i>
         */
        void dpal_set_default_nt_args(dpal_args dpal_argsPtr1);
        /**
         * Routine primarily for testing: sets CC & GG matches to 3, AA & TT <br>
         * matches to 2.<br>
         * Original signature : <code>void dpal_set_h_nt_matrix(dpal_args*)</code><br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h:160</i>
         */
        void dpal_set_h_nt_matrix(dpal_args a);
        /**
         * The argument, a, must be a DNA scoring matrix.  Modifies a so that it for a<br>
         * match between any two ambiguity codes (or between ambiguity code and base),<br>
         * e.g. B and S, the score will be the maximum of score between any base in B<br>
         * and any base in S, in the example between any pair in {C, G, T} X {C, G}.<br>
         * This function overwrites any scores already associated with pairs of<br>
         * ambiguity codes.  Return 0 on error, 1 on success.<br>
         * Original signature : <code>int dpal_set_ambiguity_code_matrix(dpal_args*)</code><br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h:169</i>
         */
        int dpal_set_ambiguity_code_matrix(dpal_args dpal_argsPtr1);
        /**
         * Align the first 2 arguments, using the scoring<br>
         * matix and other arguments supplied in the dpal_args<br>
         * argument.  Return results in argument 'out'.<br>
         * On error, sets out->score to DPAL_ERROR_SCORE<br>
         * and puts additional information in out->msg.<br>
         * Original signature : <code>void dpal(const unsigned char*, const unsigned char*, const dpal_args*, dpal_results*)</code><br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h:178</i><br>
         * @deprecated use the safer methods {@link #dpal(byte[], byte[], dpal_args, dpal_results)} and {@link #dpal(Pointer, Pointer, dpal_args, dpal_results)} instead
         */
        @Deprecated
        void dpal(Pointer charPtr1, Pointer charPtr2, dpal_args dpal_argsPtr1, dpal_results out);
        /**
         * Align the first 2 arguments, using the scoring<br>
         * matix and other arguments supplied in the dpal_args<br>
         * argument.  Return results in argument 'out'.<br>
         * On error, sets out->score to DPAL_ERROR_SCORE<br>
         * and puts additional information in out->msg.<br>
         * Original signature : <code>void dpal(const unsigned char*, const unsigned char*, const dpal_args*, dpal_results*)</code><br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h:178</i>
         */
        void dpal(byte charPtr1[], byte charPtr2[], dpal_args dpal_argsPtr1, dpal_results out);
        /**
         * Original signature : <code>void set_dpal_args(dpal_args*)</code><br>
         * <i>native declaration : C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include\limits.h:181</i>
         */
        void set_dpal_args(dpal_args dpal_argsPtr1);
        public class dpal_results extends Structure {
            /** C type : const char* */
            public Pointer msg;
            /** C type : int[1600][2] */
            public int[] path = new int[((1600) * (2))];
            public int path_length;
            /** Last alignment position in the 1st sequence. */
            public int align_end_1;
            /** Last alignment position in the 2nd sequence. */
            public int align_end_2;
            public double score;
            public dpal_results() {
                super();
            }
            protected List<? > getFieldOrder() {
                return Arrays.asList("msg", "path", "path_length", "align_end_1", "align_end_2", "score");
            }
            /**
             * @param msg C type : const char*<br>
             * @param path C type : int[1600][2]<br>
             * @param align_end_1 Last alignment position in the 1st sequence.<br>
             * @param align_end_2 Last alignment position in the 2nd sequence.
             */
            public dpal_results(Pointer msg, int path[], int path_length, int align_end_1, int align_end_2, double score) {
                super();
                this.msg = msg;
                if ((path.length != this.path.length))
                    throw new IllegalArgumentException("Wrong array size !");
                this.path = path;
                this.path_length = path_length;
                this.align_end_1 = align_end_1;
                this.align_end_2 = align_end_2;
                this.score = score;
            }
            public static class ByReference extends dpal_results implements Structure.ByReference {

            };
            public static class ByValue extends dpal_results implements Structure.ByValue {

            };
        }
        public class dpal_args extends Structure {
            /**
             * If non-0, check for and raise an error on an<br>
             * illegal character in the input strings.
             */
            public int check_chars;
            /**
             * If non-0, print debugging information to<br>
             * stderr.
             */
            public int debug;
            /** Exit with -1 on error. */
            public int fail_stop;
            /**
             * One of DPAL_GLOBAL, DPAL_LOCAL,<br>
             * DPAL_GLOBAL_END, DPAL_LOCAL_END
             */
            public int flag;
            /** Force the use of the generic function. */
            public int force_generic;
            /**
             * Force the use of the long generic no-path<br>
             * function.
             */
            public int force_long_generic;
            /** Force the use of the long maxgap 1 functions. */
            public int force_long_maxgap1;
            /** The "gap opening" penalty. */
            public int gap;
            /** The "gap extension" penalty. */
            public int gapl;
            /**
             * The maximum allowable size for a gap. -1<br>
             * indicates that the gap can be of any size.
             */
            public int max_gap;
            /**
             * If greater than 0 stop search as soon as<br>
             * score > score_max.
             */
            public int score_max;
            /**
             * If non-0, only print the score on<br>
             * stdout. (Incompatible with debug.)
             */
            public int score_only;
            /**
             * The scoring system matrix.<br>
             * C type : dpal_ssm
             */
            public int[] ssm = new int[((0xff + 1) * (0xff + 1))];
            public dpal_args() {
                super();
            }
            protected List<? > getFieldOrder() {
                return Arrays.asList("check_chars", "debug", "fail_stop", "flag", "force_generic", "force_long_generic", "force_long_maxgap1", "gap", "gapl", "max_gap", "score_max", "score_only", "ssm");
            }
            public static class ByReference extends dpal_args implements Structure.ByReference {

            };
            public static class ByValue extends dpal_args implements Structure.ByValue {

            };
        }

    }

    public static void main(String[] args) {
        INSTANCE_WIN64 = (Dpal)Native.loadLibrary(Dpal.DPAL_WIN64, Dpal.class);
    }
}
