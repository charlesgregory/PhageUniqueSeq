import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;


/**
 * Created by Thomas on 3/1/2016.
 * Manages HSQL Database
 */
public class HSqlManager {
    static final String JDBC_DRIVER_HSQL = "org.hsqldb.jdbc.JDBCDriver";
    static final String DB_URL_HSQL_C = "jdbc:hsqldb:file:database/primerdb";
    private static ImportPhagelist INSTANCE;
    private static HSqlManager instance;
    public final Connection conn;
    public static List<String[]> newPhages;
    private static final String USER = "SA";
    private static final String PASS = "";
    private static boolean written = false;

    //Initial Connection Constructor for Database initial build
    private HSqlManager() throws IOException,
            ClassNotFoundException, SQLException, IllegalAccessException, InstantiationException {
        INSTANCE = ImportPhagelist.getInstance();
        Class.forName(JDBC_DRIVER_HSQL).newInstance();
        conn = DriverManager.getConnection(DB_URL_HSQL_C,USER,PASS);
        System.out.println("PrimerDB connected");
    }
    //Returns the Instance of the manager
    public static HSqlManager getInstance() throws IOException,
            SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException {
        if (instance == null) {
            instance = new HSqlManager();
        }
        return instance;
    }
    //Main for Initial DB Build
    public static void main(String[] args) throws ClassNotFoundException,
            SQLException, InstantiationException, IllegalAccessException, IOException {
        HSqlManager db =getInstance();
        db.dbBuild();
    }
    //runs Initial build and common clustering
    public void dbBuild() throws SQLException, ClassNotFoundException, IOException,
            InstantiationException, IllegalAccessException {
        dbInit();
        primerDBsetup();
        conn.createStatement().execute("SHUTDOWN");
    }
    public static void runNewBP(Connection connection, int bps) throws IOException,
            SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
        commonInitialize(bps,connection);
        uniqueDB(connection,bps);
        connection.createStatement().execute("SHUTDOWN");
    }
    public static void runNewBPCommon(Connection connection, int bps) throws IOException,
            SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
        commonInitialize(bps,connection);
        connection.createStatement().execute("SHUTDOWN");
    }
    public static void runNewBPUnique(Connection connection, int bps) throws IOException,
            SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
        written=true;
        uniqueDB(connection,bps);
        connection.createStatement().execute("SHUTDOWN");
    }
    //Sets up DB and tables
    private void dbInit() throws SQLException {
        Statement init = conn.createStatement();
        String start2="CREATE SCHEMA Primerdb AUTHORIZATION DBA" +
        "\tCREATE TABLE Primers(\n" +
                "\tid INTEGER GENERATED BY DEFAULT AS IDENTITY,\n" +
                "\tBp INTEGER NOT NULL,\n" +
                "\tSequence VARCHAR(45) NOT NULL,\n" +
                "\tStrain VARCHAR(45) NOT NULL,\n" +
                "\tCluster VARCHAR(45) NOT NULL,\n" +
                "\tTm FLOAT NULL,\n" +
                "\tGC FLOAT NULL,\n" +
                "\tComp FLOAT NULL,\n" +
                "\tCommonP BOOLEAN NULL,\n" +
                "\tUniqueP BOOLEAN NULL,\n" +
                "\tPicked BOOLEAN NULL,\n" +
                "\tHairpin BOOLEAN NULL,\n"+
                "\tSequenceMatch VARCHAR(45) NULL,\n" +
                "\tPRIMARY KEY (id))\n" +
                "\n" +
                "\tCREATE TABLE Phages(\n" +
                "\tName VARCHAR(45) NOT NULL,\n" +
                "\tCluster VARCHAR(45) NOT NULL,\n" +
                "\tStrain VARCHAR(45) NOT NULL,\n" +
                "\tPRIMARY KEY (Name))\n";
        init.executeUpdate(start2);
        init.executeUpdate("CREATE INDEX a on primerdb.primers(Cluster)");
        init.executeUpdate("CREATE INDEX b on primerdb.primers(Strain)");
        init.executeUpdate("CREATE INDEX c on primerdb.primers(Sequence)");
        init.close();
        System.out.println("Database Initialized");
    }
    //Inserts current strains, clusters and phages
    private void primerDBsetup() throws SQLException, IOException {
        System.out.println("Building DB");
//        PreparedStatement insertStrain = conn
//                .prepareStatement("INSERT INTO Primerdb.Strain(Name) values(?);");
//        PreparedStatement insertCluster = conn
//                .prepareStatement("INSERT INTO Primerdb.Clusters(Name, Strain_Name) values(?,?);");
//        PreparedStatement insertPhage = conn
//                .prepareStatement("INSERT INTO Primerdb.Phages(Name, Clusters_Name, Clusters_Strain_Name)" +
//                        " values(?,?,?);");
//        Statement queryClusters = conn.createStatement();
//        INSTANCE=ImportPhagelist.getInstance();
//        INSTANCE.strains.forEach(x->{
//            List<String[]> phageslist;
//            try {
//                phageslist = INSTANCE.readFile(INSTANCE.path, x);
//            } catch (IOException e) {
//                e.printStackTrace();
//                phageslist = null;
//            }
//
//            try {
//                insertStrain.setString(1,x.split(" ")[0]);
//                insertStrain.executeUpdate();
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//            phageslist.stream().map(z -> z[0]).collect(Collectors.toSet()).forEach(y->{
//                try {
//                    insertCluster.setString(1,y);
//                    insertCluster.setString(2,x.split(" ")[0]);
//                    insertCluster.executeUpdate();
//                } catch (SQLException e) {
//                    e.printStackTrace();
//                }
//            });
//        });
//        List<String[]> dbclust = new ArrayList<>();
//        ResultSet rs = queryClusters.executeQuery("Select * From Primerdb.Clusters;");
//        while (rs.next()){
//            String[] r = new String[2];
//            r[0]= rs.getString("Strain_Name");
//            r[1]= rs.getString("Name");
//            dbclust.add(r);
//        }
//        dbclust.forEach(x-> {
//            List<String[]> phages;
//            try {
//                phages = INSTANCE.readFile(INSTANCE.path, x[0])
//                        .stream().filter(t -> t[0].equals(x[1])).collect(Collectors.toList());
//            } catch (IOException e) {
//                e.printStackTrace();
//                phages = null;
//            }
//            for (String[] phage : phages) {
//                try {
//                    insertPhage.setString(1, phage[1]);
//                    insertPhage.setString(2, phage[0]);
//                    insertPhage.setString(3, x[0]);
//                    insertPhage.executeUpdate();
//                } catch (SQLException e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//        insertCluster.close();
//        insertStrain.close();
//        insertPhage.close();
        PreparedStatement insertPhage = conn
                .prepareStatement("INSERT INTO Primerdb.Phages" +
                        "(Name, Cluster, Strain) values(?,?,?);");
        Statement queryClusters = conn.createStatement();
        INSTANCE=ImportPhagelist.getInstance();
        INSTANCE.strains.forEach(x->{
            List<String[]> phageslist;
            try {
                phageslist = INSTANCE.readFile(INSTANCE.path, x);
            } catch (IOException e) {
                e.printStackTrace();
                phageslist = null;
            }

            try {
                insertPhage.setString(3,x.split(" ")[0]);
            } catch (SQLException e) {
                e.printStackTrace();
            }
            phageslist.stream().map(z -> z[0]).collect(Collectors.toSet()).forEach(y->{
                try {
                    insertPhage.setString(2,y);
                    List<String[]> phages;
                    try {
                        phages = INSTANCE.readFile(INSTANCE.path, x)
                                .stream().filter(t -> t[0].equals(y)).collect(Collectors.toList());
                    } catch (IOException e) {
                        e.printStackTrace();
                        phages=null;
                    }
                    for (String[] phage : phages) {
                        try {
                            insertPhage.setString(1, phage[1]);
                            insertPhage.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            });
        });
        insertPhage.close();
        System.out.println("DB Built");
    }
    //Inserts primers common to a clusters for all clusters
    private static void commonInitialize(int bps,Connection connection) throws SQLException, IOException {
        String base = new File("").getAbsolutePath();
        CSV.makeDirectory(new File(base + "/PhageData"));
        INSTANCE =ImportPhagelist.getInstance();
        INSTANCE.readFileAll(INSTANCE.path)
                .stream().forEach(x -> {
            try {
                CSV.writeDataCSV(x[1], Fasta.process(x[1], bps));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        written = true;
        Connection db = connection;
        db.setAutoCommit(false);
        Statement stat = db.createStatement();
        stat.execute("SET FILES LOG FALSE\n" +
                "CHECKPOINT");
        PreparedStatement st = db.prepareStatement("Insert INTO Primerdb.Primers" +
                "(Bp,Sequence, CommonP, UniqueP, Picked, Strain, Cluster)" +
                " Values(?,?,true,false,false,?,?)");
        ResultSet call = stat.executeQuery("Select * From Primerdb.Phages;");
        List<String[]> phages = new ArrayList<>();
        while (call.next()) {
            String[] r = new String[3];
            r[0]=call.getString("Strain");
            r[1]=call.getString("Cluster");
            r[2]=call.getString("Name");
            phages.add(r);
        }
        phages.parallelStream().map(x->x[0]).collect(Collectors.toSet())
                .parallelStream().forEach(x->{
            phages.stream().filter(y->y[0].equals(x)).map(y->y[1]).collect(Collectors.toSet())
                    .forEach(z->{
                        try {
                            List<String> clustphages = phages.stream()
                                    .filter(a -> a[0].equals(x) && a[1].equals(z)).map(a -> a[2])
                                    .collect(Collectors.toList());
                            Set<CharSequence> primers = Collections.synchronizedSet(
                                    CSV.readCSV(base + "/PhageData/" + clustphages.get(0) + ".csv"));
                            clustphages.remove(0);
                            clustphages.parallelStream().forEach(phage->{
                                primers.retainAll(CSV.readCSV(base + "/PhageData/" + phage + ".csv"));
                            });
                            int i = 0;
                            for (CharSequence a : primers) {
                                try {
                                    //finish update
                                    st.setInt(1, bps);
                                    st.setString(2, a.toString());
                                    st.setString(3, x);
                                    st.setString(4, z);
                                    st.addBatch();
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                    System.out.println("Error occurred at " + x + " " + z);
                                }
                                i++;
                                if (i == 1000) {
                                    i = 0;
                                    st.executeBatch();
                                    db.commit();
                                }
                            }
                            if (primers.size() % 1000 != 0&&primers.size()!=0) {
                                st.executeBatch();
                                db.commit();
                            }
                        }catch (SQLException e){
                            e.printStackTrace();
                            System.out.println("Error occurred at " + x + " " + z);
                        }
                    });
        });
//        PreparedStatement st = db.prepareStatement("Insert INTO Primerdb.Primers" +
//                "(Bp, Sequence, CommonP, UniqueP, Picked, Clusters_Name, Clusters_Strain_Name)" +
//                " Values(?,?,true,false,false,?,?)");
//        ResultSet strainscall = stat.executeQuery("Select * From Primerdb.Strain;");
//        List<String> strains = new ArrayList<>();
//        while (strainscall.next()) {
//            strains.add(strainscall.getString("Name"));
//        }
//        strains.parallelStream().forEach(x -> {
//            List<String[]> phages = null;
//            try {
//                ImportPhagelist INSTANCE = ImportPhagelist.getInstance();
//                phages = INSTANCE.readFile(INSTANCE.path, x);
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//            List<String> clusters = new ArrayList<String>();
//            ResultSet clusterscall = null;
//            try {
//                clusterscall = stat.executeQuery("Select * From Primerdb.Clusters " +
//                        "WHERE Strain_Name ='" + x + "';");
//                while (clusterscall.next()) {
//                    clusters.add(clusterscall.getString("Name"));
//                }
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//            for (String y : clusters) {
//                Set<CharSequence> primers = new HashSet<>();
//                List<String> clusterPhages = new ArrayList<String>();
//                try {
//
//                    ResultSet phagescall = stat.executeQuery("Select Name From " +
//                            "Primerdb.Phages WHERE Clusters_Strain_Name = '" + x + "' " +
//                            "and Clusters_Name = '" + y + "';");
//                    while (phagescall.next()) {
//                        clusterPhages.add(phagescall.getString("Name"));
//                    }
//                    primers =CSV.readCSV(base + "/PhageData/"+clusterPhages.get(0)+".csv");
//                    clusterPhages.remove(0);
//                    for (String z : clusterPhages) {
//                        primers.retainAll(CSV.readCSV(base + "/PhageData/" + z + ".csv"));
//                    }
//                    int i = 0;
//                    for (CharSequence a : primers) {
//                        try {
//                            //finish update
//                            st.setInt(1,bps);
//                            st.setString(2, a.toString());
//                            st.setString(3, y);
//                            st.setString(4, x);
//                            st.addBatch();
//                        } catch (SQLException e) {
//                            e.printStackTrace();
//                            System.out.println("Error occurred at " + x + " " + y);
//                        }
//                        i++;
//                        if (i == 1000) {
//                            i = 0;
//                            st.executeBatch();
//                            db.commit();
//                        }
//                    }
//                    if (primers.size() % 1000 != 0) {
//                        st.executeBatch();
//                        db.commit();
//                    }
//
//                } catch (SQLException e) {
//                    e.printStackTrace();
//                    System.out.println("Error occurred at " + x + " " + y);
//                }
//            }
//
//        });
        stat.execute("SET FILES LOG TRUE\n" +
                "CHECKPOINT DEFRAG");
        st.close();
        stat.close();
        System.out.println("Common Updated");
    }
    //Runs a check for new strains, clusters, and phages, common and unique clustering
    public static void runChecks(Connection connection,int bps) throws SQLException, IOException,
            IllegalAccessException, InstantiationException, ClassNotFoundException {
        INSTANCE = ImportPhagelist.getInstance();
        checkStrains(connection);
        checkCluster(connection);
        checkPhage(connection);
        commonClusterNewPhages(connection, bps);
        if(newPhages.size()!=0)
            uniqueDB(connection,bps);
        connection.createStatement().execute("SHUTDOWN");
    }
    //Checks for new phages
    private static void checkPhage(Connection connection) throws SQLException, IOException {
        List<String[]> all = INSTANCE.readFileAllStrains(INSTANCE.path);
        List<String> clusters = all.stream().map(x -> x[0]).collect(Collectors.toList());
        Set<String> phages = all.stream().map(x -> x[1]).collect(Collectors.toSet());
        List<String> strains = all.stream().map(x -> x[2]).collect(Collectors.toList());
        List<String> phageslist = all.stream().map(x -> x[1]).collect(Collectors.toList());
        Set<String> dbphages = new HashSet<>();
        Statement st = connection.createStatement();
        PreparedStatement insertPhages =connection
                .prepareStatement("INSERT INTO Primerdb.Phages(Name, Clusters_Name, Clusters_Strain_Name)" +
                        " values(?,?,?);");
        String sql = "SELECT * FROM Primerdb.Phages;";
        ResultSet rs = st.executeQuery(sql);
        while (rs.next()){
            dbphages.add(rs.getString("Name"));
        }
        phages.removeAll(dbphages);
        List<String[]> phageinfo = new ArrayList<>();
        if(phages.size()>0){
            System.out.println("Phages Added:");
            phages.forEach(x->{
                String[] ar = new String[3];
                System.out.println(x);
                String cluster =clusters.get(phageslist.indexOf(x));
                String strain =strains.get(phageslist.indexOf(x));
                try {
                    insertPhages.setString(1,x);
                    insertPhages.setString(2,cluster);
                    insertPhages.setString(3,strain);
                    insertPhages.addBatch();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                try {
                    insertPhages.executeBatch();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                ar[0] = x;
                ar[1] = cluster;
                ar[2] = strain;
                phageinfo.add(ar);
            });
            newPhages =phageinfo;
        }
        else {
            System.out.println("No Phages added");
        }
        st.close();
        insertPhages.close();
    }
    //Checks for new clusters
    private static void checkCluster(Connection connection) throws SQLException, IOException {
        String sql="SELECT * FROM Primerdb.Clusters;";
        Statement stmt = connection.createStatement();
        PreparedStatement insertClusters = connection
                .prepareStatement("INSERT INTO Primerdb.Clusters(Name, Strain_Name)" +
                        " values(?,?);");
        ResultSet rs = stmt.executeQuery(sql);
        Set<String> sqlSet = new HashSet<>();
        while(rs.next()){
            sqlSet.add(rs.getString("Name"));
        }
        List<String[]> phagelist = INSTANCE.readFileAllStrains(INSTANCE.path);
        List<String> clusterList = phagelist.stream().map(x -> x[0]).collect(Collectors.toList());
        List<String> strains = phagelist.stream().map(x -> x[0]).collect(Collectors.toList());
        Set<String> clusterSet = phagelist.stream().map(x -> x[0]).collect(Collectors.toSet());
        clusterSet.removeAll(sqlSet);
        if(clusterSet.size()>0){
            System.out.println("Clusters added:");
            clusterSet.forEach(x -> {
                System.out.println(x);
                String strain = strains.get(clusterList.indexOf(x));
                try {
                    insertClusters.setString(1,x);
                    insertClusters.setString(2,strain);
                    insertClusters.addBatch();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            });
            insertClusters.executeBatch();
        }
        else{
            System.out.println("No new clusters");
        }
        insertClusters.close();
        stmt.close();
    }
    //Checks for new Strains
    private static void checkStrains(Connection connection) throws SQLException {
        String sql="SELECT * FROM Primerdb.Strain;";
        Statement stmt = connection.createStatement();
        PreparedStatement insertStrains = connection
                .prepareStatement("INSERT INTO Primerdb.Strain(Name)" +
                        " values(?);");
        ResultSet rs = stmt.executeQuery(sql);
        Set<String> sqlSet = new HashSet<>();
        while(rs.next()){
            sqlSet.add(rs.getString("Name"));
        }
        Set<String> strains = INSTANCE.strains;
        strains.removeAll(sqlSet);
        if(strains.size()>0){
            System.out.println("Strains added:");
            strains.forEach(x -> {
                System.out.println(x);
                try {
                    insertStrains.setString(1,x);
                    insertStrains.addBatch();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            });
            insertStrains.executeBatch();
        }
        else{
            System.out.println("No new strains");
        }
        stmt.close();
        insertStrains.close();
    }
    //common clusters new phages
    public static void commonClusterNewPhages(Connection connection, int bps) throws SQLException,
            IOException, ClassNotFoundException, IllegalAccessException, InstantiationException {
        Connection db = connection;
        db.setAutoCommit(false);
        PreparedStatement st = db.prepareStatement("UPDATE Primerdb.Primers SET CommonP = False, UniqueP = False" +
                " WHERE Clusters_Name = ? and " +
                "Clusters_Strain_Name = ? and Sequence = ? and Bp =?");
        Statement stat = db.createStatement();
        if(newPhages!=null) {
            List<String[]> phages = newPhages;
            phages.forEach(x -> {
                Set<CharSequence> primers = new HashSet<>();
                try {
                    ResultSet rs = stat.executeQuery("SELECT * FROM Primerdb.Primers WHERE" +
                            " Clusters_Name = '" + x[1] + "' and Clusters_Strain_Name = '" + x[2] + "' and CommonP = True");
                    while (rs.next()) {
                        primers.add((CharSequence) rs.getString("Sequence"));
                    }
                    primers.removeAll(Fasta.process(x[0], 15));
                    if(primers.size()!=0) {
                        primers.forEach(y -> {
                            try {
                                //finish update
                                st.setString(1, x[1]);
                                st.setString(2, x[2]);
                                st.setString(3, y.toString());
                                st.setInt(4,bps);
                                st.addBatch();
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }
                        });
                        st.executeBatch();
                        db.commit();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            });
        }
        System.out.println("Common Updated");
        st.close();
    }
    //unique clusters all phages
    public static void uniqueDB(Connection connection, int bps) throws ClassNotFoundException,
            SQLException, InstantiationException, IllegalAccessException, IOException {
        DpalLoad.main(new String[1]);
        ThalLoad.main(new String[1]);
        HSqlPrimerDesign.Dpal_Inst = DpalLoad.INSTANCE_WIN64;
        HSqlPrimerDesign.Thal_Inst = ThalLoad.INSTANCE64;
        String base = new File("").getAbsolutePath();
        if(!written) {
            CSV.makeDirectory(new File(base + "/PhageData"));
            INSTANCE.readFileAll(INSTANCE.path)
                    .stream().forEach(x -> {
                try {
                    CSV.writeDataCSV(x[1], Fasta.process(x[1], bps));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        }
        Connection db = connection;
        db.setAutoCommit(false);
        Statement stat = db.createStatement();
        PrintWriter log = new PrintWriter(new File("javalog.log"));
        stat.execute("SET FILES LOG FALSE;\n" +
                "CHECKPOINT;");
        PreparedStatement st = db.prepareStatement("UPDATE Primerdb.Primers" +
                " SET UniqueP = true, Tm = ?, GC =?, Comp =?, Hairpin =?" +
                "WHERE Cluster = ? and Strain = ? and " +
                "Sequence = ? and Bp = ?");
        ResultSet call = stat.executeQuery("Select * From Primerdb.Phages;");
        List<String[]> phages = new ArrayList<>();
        while (call.next()) {
            String[] r = new String[3];
            r[0]=call.getString("Strain");
            r[1]=call.getString("Cluster");
            r[2]=call.getString("Name");
            phages.add(r);
        }
        phages.stream().map(x->x[0]).collect(Collectors.toSet())
                .parallelStream().forEach(x->{
            phages.stream().filter(y->y[0].equals(x)).map(y->y[1]).collect(Collectors.toSet())
                    .forEach(z->{
                        try {
                            long start =System.nanoTime();
                            Set<String> nonclustphages = phages.stream()
                                    .filter(a -> a[0].equals(x) && !a[1].equals(z)).map(a -> a[2])
                                    .collect(Collectors.toSet());
                            ResultSet resultSet = stat.executeQuery("Select Sequence from primerdb.primers" +
                                    " where Strain ='"+x+"' and Cluster ='"+z+"' and CommonP = true" +
                                    " and Bp = "+Integer.valueOf(bps)+" ");
                            Set<CharSequence> primers = Collections.synchronizedSet(new HashSet<>());
                            while (resultSet.next()){
                                primers.add(resultSet.getString("Sequence"));
                            }
                            System.out.println((System.nanoTime()-start)/1000);
                            System.out.println("DB pull");
                            start = System.nanoTime();
                            for (String phage : nonclustphages) {
                                CSV.readCSV(base + "/PhageData/" + phage + ".csv").parallelStream()
                                        .filter(primer -> primers.contains(primer))
                                        .forEach(primers::remove);

                            }
                            System.out.println((System.nanoTime()-start)/1000);
                            System.out.println("Phages finished");
                            start = System.nanoTime();
                            int i = 0;
                            for (CharSequence a : primers) {
                                try {
                                    st.setDouble(1,HSqlPrimerDesign.primerTm(a,0,800,1.5,0.2));
                                    st.setDouble(2,HSqlPrimerDesign.gcContent(a));
                                    st.setDouble(3,HSqlPrimerDesign.complementarity(a,a,HSqlPrimerDesign.Dpal_Inst));
                                    st.setBoolean(4,HSqlPrimerDesign.calcHairpin((String)a,4));
                                    st.setString(5, z);
                                    st.setString(6, x);
                                    st.setString(7, a.toString());
                                    st.setInt(8, bps);
                                    st.addBatch();
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                    System.out.println("Error occurred at " + x + " " + z);
                                }
                                i++;
                                if (i == 1000) {
                                    i = 0;
                                    st.executeBatch();
                                    db.commit();
                                }
                            }
                            System.out.println((System.nanoTime()-start)/1000);
                            System.out.println("Update finished");
                            if (primers.size() % 1000 != 0&&primers.size()!=0) {
                                st.executeBatch();
                                db.commit();
                            }
                        }catch (SQLException e){
                            e.printStackTrace();
                            System.out.println("Error occurred at " + x + " " + z);
                        }
                        log.println(z);
                        log.flush();
                    });
        });
        stat.execute("SET FILES LOG TRUE\n" +
                "CHECKPOINT DEFRAG");
        st.close();
        stat.close();
        System.out.println("Unique Updated");
    }
}
